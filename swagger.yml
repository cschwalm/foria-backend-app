openapi: 3.0.3
info:
  title: Foria API Server
  description: Backend API service for the Foria ticketing app.
  contact:
    email: info@foriatickets.com
  version: 1.0.0
externalDocs:
  description: JIRA Board
  url: https://foria.atlassian.net
security:
  - auth: []
servers:
  - url: https://test-api.foriatickets.com/v1
    description: Staging hostname and base path.
  - url: https://api.foriatickets.com/v1
    description: Production hostname and base path.
tags:
  - name: event
    description: Event operations.
  - name: status
    description: Server operations.
  - name: ticket
    description: Ticket operations.
  - name: user
    description: Operations for the signed in user. May be customer or venue.
  - name: venue
    description: Operations to be preformed by a venue with venue scope.
paths:
  /health-check:
    get:
      tags:
        - status
      summary: Confirms the server is up and running.
      operationId: healthCheck
      responses:
        200:
          description: Confirms the server is running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /event:
    get:
      tags:
        - event
      summary: Displays all current or future events.
      operationId: getAllEvents
      responses:
        200:
          description: All upcoming evnets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      tags:
        - event
      summary: Create event in application database.
      operationId: createEvent
      security:
        - auth:
            - write:event
      requestBody:
        description: Created event object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: Event created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /event/{event_id}:
    get:
      tags:
        - event
      summary: Get event by event_id.
      description: Obtains the event by their Foria event_id.
      operationId: getEvent
      security: []
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        404:
          description: Event not found by ID.
          content: {}
    put:
      tags:
        - event
      summary: Updates basic event metadata.
      operationId: updateEvent
      security:
        - auth:
            - write:event
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated event object. No price/fee config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: Event created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /event/{event_id}/ticketTypeConfig/promo:
    post:
      tags:
        - event
      summary: Obtains list of ticket type config plus promo config.
      description: Obtains list of unlocked promo code config.
      operationId: applyPromotionCode
      security: []
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User supplied promotion code.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionCode'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketTypeConfig'
        404:
          description: Event not found by ID.
          content: {}
    put:
      tags:
        - event
      summary: Onboards a new promo code for use.
      operationId: createPromoCode
      security:
        - auth:
            - write:event
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Create request payload.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionCodeCreateRequest'
        required: true
      responses:
        200:
          description: OK - Promo Code Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Event not found by ID.
          content: {}
  /event/{event_id}/cancel:
    put:
      tags:
        - event
      summary: CANCELS an event and REFUNDS ALL customers.
      description: Irrevocably CANCELS an event. This takes down the listing, CANCELS ALL orders, CANCELS ALL tickets, REFUNDS ALL customers, and notifies users the event is CANCELED by push and email. Use with extreme caution.
      operationId: cancelEvent
      security:
        - auth:
            - write:event_cancel
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Config options for cancel.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelEvent'
        required: true
      responses:
        200:
          description: OK - Event Canceled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Event not found by ID.
          content: {}
  /event/{event_id}/attendees:
    get:
      tags:
        - event
      summary: Obtains ticket metadata and user info for the event.
      description: Obtains all ticket metadata that has been issued for the event.
      operationId: getAttendeesForEvent
      security:
        - auth:
            - write:venue_redeem
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendee'
        404:
          description: Event not found by ID.
          content: {}
  /event/{event_id}/ticketTypeConfig:
    post:
      tags:
        - event
      summary: Creates a new price tier for an event.
      description: Creates a new price tier for an existing event.
      operationId: createTicketTypeConfig
      security:
        - auth:
            - write:event
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: New price tier.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketTypeConfig'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketTypeConfig'
        404:
          description: Event not found by ID.
          content: {}
  /event/{event_id}/ticketTypeConfig/{ticket_type_config_id}:
    delete:
      tags:
        - event
      summary: Removes a price tier.
      description: Removes price tier for future purchases. Existing events are not impacted
      operationId: removeTicketTypeConfig
      security:
        - auth:
            - write:event
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
        - name: ticket_type_config_id
          in: path
          description: The ticket_type_config_id ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketTypeConfig'
        404:
          description: Event not found by ID.
          content: {}
  /event/{event_id}/ticketFeeConfig:
    post:
      tags:
        - event
      summary: Creates a new fee entry for the event.
      description: All fees are additive ontop of other active fees.
      operationId: createTicketFeeConfig
      security:
        - auth:
            - write:event
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: New fee config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketFeeConfig'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFeeConfig'
        404:
          description: Event not found by ID.
          content: {}
  /event/{event_id}/ticketFeeConfig/{ticket_fee_config_id}:
    delete:
      tags:
        - event
      summary: Removes a fee config.
      description: Prevents the fee from being applied to future ticket orders.
      operationId: removeTicketFeeConfig
      security:
        - auth:
            - write:event
      parameters:
        - name: event_id
          in: path
          description: The event ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
        - name: ticket_fee_config_id
          in: path
          description: The ticket_fee_config_id ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketFeeConfig'
        404:
          description: Event not found by ID.
          content: {}
  /ticket/{ticket_id}:
    get:
      tags:
        - ticket
      summary: Obtains full ticket information.
      operationId: getTicket
      parameters:
        - name: ticket_id
          in: path
          description: The ticket ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        404:
          description: Ticket not found by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /ticket/{ticket_id}/activate:
    post:
      tags:
        - ticket
      summary: Activates the ticket for the mobile device. May only be called in valid
        state.
      operationId: activateTicket
      parameters:
        - name: ticket_id
          in: path
          description: The ticket ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivationResult'
        400:
          description: Not able to activate ticket. Invalid state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Ticket not found by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /ticket/{ticket_id}/cancelTransfer:
    post:
      tags:
        - ticket
      summary: Cancels the transfer request and allows ticket to be redeemed.
      operationId: cancelTransfer
      parameters:
        - name: ticket_id
          in: path
          description: The ticket ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        400:
          description: Not able to transfer ticket. Invalid status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Ticket not found by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /ticket/calculateOrderTotal:
    post:
      tags:
        - ticket
      summary: Calculates the order total to display to the user. This uses the same logic that checkout uses to ensure the price is the same.
      operationId: calculateOrderTotal
      requestBody:
        description: Checkout request object minus payment token.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: Checkout successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderTotal'
  /ticket/checkout:
    post:
      tags:
        - ticket
      summary: Completes a users checkout and issues tickets with their supplied payment token.
      operationId: checkout
      requestBody:
        description: Checkout request object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: Checkout successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /ticket/{ticket_id}/reactivate:
    post:
      tags:
        - ticket
      summary: Activates a ticket on a new device. This should be manually called
        on device switch.
      operationId: reactivateTicket
      parameters:
        - name: ticket_id
          in: path
          description: The ticket ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivationResult'
        400:
          description: Not able to reactivate ticket. Invalid status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Ticket not found by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /ticket/{ticket_id}/manualRedeem:
    post:
      tags:
        - ticket
      summary: Manually redeems the ticket.
      operationId: manualRedeemTicket
      parameters:
        - name: ticket_id
          in: path
          description: The ticket ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        400:
          description: Not able to redeem ticket. Invalid status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Ticket not found by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /ticket/redeem:
    post:
      tags:
        - ticket
      summary: Redeems the ticket if in valid state. This cannot be undone.
      operationId: redeemTicket
      security:
        - auth:
            - write:redeem
      requestBody:
        description: Checkout request object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedemptionRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedemptionResult'
        400:
          description: Not able to redeem ticket. Invalid status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedemptionResult'
        404:
          description: Ticket not found by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /ticket/{order_id}/refund:
    delete:
      tags:
        - ticket
      summary: Refunds the entire order. This cannot be undone.
      operationId: refundOrder
      security:
        - auth:
            - write:venue
      parameters:
        - name: order_id
          in: path
          description: The order ID to refund in full.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        400:
          description: Order is in a invalid state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Order ID is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /ticket/{ticket_id}/transfer:
    post:
      tags:
        - ticket
      summary: Starts transfer process to new user.
      operationId: transferTicket
      parameters:
        - name: ticket_id
          in: path
          description: The ticket ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Must supply name and email. Mobile number is optional.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        400:
          description: Not able to transfer ticket. Invalid status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Ticket not found by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /register:
    post:
      tags:
        - user
      summary: Create user in application database.
      description: This should only be called from Auth0.
      operationId: registerUser
      security:
        - auth:
            - write:register

      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: User created or has already been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user:
    get:
      tags:
        - user
      summary: Obtains current user information.
      description: Obtains current user information.
      operationId: getUser
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /user/tickets:
    get:
      tags:
        - user
      summary: Gets the list of users owned tickets.
      operationId: getTickets
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        404:
          description: User not found by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /user/registerToken:
    post:
      tags:
        - user
      summary: Enrolls the created/refreshed device token.
      operationId: registerToken
      requestBody:
        description: Token obtained from FCM.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceToken'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /user/sendVerificationEmail:
    post:
      tags:
        - user
      summary: Resends user verification email from identity provider.
      operationId: sendVerificationEmail
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
  /venue:
    get:
      tags:
        - venue
      summary: Obtains data for all authorized venues.
      operationId: getAllVenues
      responses:
        200:
          description: Returns metadata for each venue the user has access to along with event info.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'
    post:
      tags:
        - venue
      summary: Create venue in application database.
      operationId: createVenue
      security:
        - auth:
            - write:venue
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
        required: true
      responses:
        200:
          description: Venue created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
  /venue/{venue_id}:
    get:
      tags:
        - venue
      summary: Get venue by venue_id.
      description: Obtains the user by their Foria venue_id.
      operationId: getVenue
      parameters:
        - name: venue_id
          in: path
          description: The venue ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        404:
          description: Venue not found by ID.
          content: {}
  /venue/{venue_id}/authorize/{user_id}:
    post:
      tags:
        - venue
      summary: Authorizes user account for venue access.
      description: Allows user account to preform actions on venue assets.
      operationId: authorizeUser
      security:
        - auth:
            - write:venue
      parameters:
        - name: venue_id
          in: path
          description: The venue ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          description: The user ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Venue not found or other error.
  /venue/{venue_id}/deauthorize/{user_id}:
    post:
      tags:
        - venue
      summary: Deauthorizes user account for venue access.
      description: Disallows user account to preform actions on venue assets.
      operationId: deauthorizeUser
      security:
        - auth:
            - write:venue
      parameters:
        - name: venue_id
          in: path
          description: The venue ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          description: The user ID stored in the Foria database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseApiModel'
        404:
          description: Venue not found or other error.
components:
  schemas:
    ActivationResult:
      type: object
      properties:
        ticket_secret:
          type: string
          readOnly: true
        ticket:
          $ref: '#/components/schemas/Ticket'
    Address:
      type: object
      properties:
        street_address:
          type: string
          example: 12345 Fake Ln
        city:
          type: string
          example: Fake City
        state:
          type: string
          example: MO
        zip:
          maxLength: 5
          minLength: 5
          type: string
          example: "55555"
        country:
          maxLength: 3
          minLength: 3
          type: string
          example: USA
    Attendee:
      type: object
      properties:
        ticket_id:
          type: string
          format: uuid
        ticket:
          $ref: '#/components/schemas/Ticket'
        user_id:
          type: string
          format: uuid
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
    CancelEvent:
      type: object
      properties:
        reason:
          type: string
    DeviceToken:
      type: object
      properties:
        token:
          type: string
    EventAddress:
      type: object
      readOnly: true
      properties:
        venue_name:
          type: string
          example: Madison Square Garden
        street_address:
          type: string
          example: 12345 Fake Ln
        city:
          type: string
          example: Fake City
        state:
          type: string
          example: MO
        zip:
          maxLength: 5
          minLength: 5
          type: string
          example: "55555"
        country:
          maxLength: 3
          minLength: 3
          type: string
          example: USA
    Order:
      type: object
      required:
        - ticket_amount_map
        - event_id
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        event_id:
          type: string
          format: uuid
        ticket_line_item_list:
          type: array
          items:
            $ref: '#/components/schemas/TicketLineItem'
        payment_token:
          type: string
        promotion_code:
          example: 'TEST1234'
          type: string
          minLength: 4
          maxLength: 255
    OrderTotal:
      type: object
      properties:
        subtotal:
          type: string
          readOnly: true
        fees:
          type: string
          readOnly: true
        grand_total:
          type: string
          readOnly: true
        subtotal_cents:
          type: string
          readOnly: true
        fees_cents:
          type: string
          readOnly: true
        grand_total_cents:
          type: string
          readOnly: true
        currency:
          maxLength: 3
          minLength: 3
          type: string
          example: USD
          default: USD
          readOnly: true
    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        event_id:
          type: string
          format: uuid
        owner_id:
          type: string
          format: uuid
        purchaser_id:
          type: string
          format: uuid
        secret_hash:
          type: string
          example: TEST_SECRET
          readOnly: true
        status:
          type: string
          enum:
            - ACTIVE
            - ISSUED
            - TRANSFER_PENDING
            - REDEEMED
            - CANCELED
            - CANCELED_FRAUD
        ticket_type_config:
          $ref: '#/components/schemas/TicketTypeConfig'
        issued-date:
          type: string
          format: date_time
    TicketLineItem:
      type: object
      required:
        - ticket_type_id
        - amount
      properties:
        ticket_type_id:
          type: string
          format: uuid
        amount:
          type: integer
          minimum: 1
          maximum: 10
    TicketTypeConfig:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: General Admission
        description:
          type: string
          example: General Admission for the Plebs
        type:
          default: PUBLIC
          type: string
          enum:
            - PUBLIC
            - PROMO
        authorized_amount:
          type: integer
        amount_remaining:
          type: integer
          readOnly: true
          minimum: 0
          maximum: 10
        price:
          type: string
          example: "1.00"
        calculated_fee:
          type: string
          example: "2.50"
          readOnly: true
        currency:
          maxLength: 3
          minLength: 3
          type: string
          example: USD
          default: USD
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        auth0_id:
          type: string
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@test.com
    Venue:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: Test Venue
        description:
          type: string
          example: Test Venue
        contact_name:
          type: string
          example: Johny Tester
        contact_email:
          type: string
          example: johny.tester@test.com
        contact_phone_country:
          type: string
          example: +1
        contact_phone:
          type: string
          example: "5555555555"
        address:
          $ref: '#/components/schemas/Address'
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    BaseApiModel:
      type: object
      properties:
        status_code:
          type: integer
          format: int32
          default: 0
        message:
          type: string
          default: OK
    TicketFeeConfig:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: Standard Foria Test Fee
        description:
          type: string
          example: Example Fee
        method:
          type: string
          example: FLAT
          enum:
            - FLAT
            - PERCENT
        type:
          type: string
          example: ISSUER
          enum:
            - ISSUER
            - TAX
            - VENUE
        amount:
          type: string
          example: "1.00"
        currency:
          maxLength: 3
          minLength: 3
          type: string
          example: USD
          default: USD
    Event:
      type: object
      required:
        - venue_id
        - name
        - tag_line
        - description
        - image_url
        - type
        - visibility
        - start_time
        - end_time
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        venue_id:
          type: string
          format: uuid
        name:
          type: string
          example: Test Event
        tag_line:
          type: string
          example: "For the Fans"
        description:
          type: string
          example: Test Event
        image_url:
          type: string
          example: https://foriatickets.com/favicon.ico
        type:
          type: string
          default: PRIMARY
          example: PRIMARY
          enum:
            - PRIMARY
            - RESELL
        visibility:
          type: string
          default: PUBLIC
          example: PUBLIC
          enum:
            - PUBLIC
            - PRIVATE
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/EventAddress'
        ticket_fee_config:
          type: array
          items:
            $ref: '#/components/schemas/TicketFeeConfig'
        ticket_type_config:
          type: array
          items:
            $ref: '#/components/schemas/TicketTypeConfig'
    RedemptionRequest:
      type: object
      properties:
        ticket_id:
          type: string
          format: uuid
        ticket_otp:
          type: string
          maxLength: 6
    RedemptionResult:
      type: object
      properties:
        status:
          type: string
          enum:
            - ALLOW
            - DENY
        ticket:
          $ref: '#/components/schemas/Ticket'
    TransferRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        receiver_email:
          type: string
          format: email
    PromotionCode:
      type: object
      properties:
        code:
          type: string
          minLength: 4
          maxLength: 255
    PromotionCodeCreateRequest:
      type: object
      properties:
        ticket_type_config_id:
          type: string
          format: uuid
        name:
          type: string
          example: 10 percent off
          minLength: 1
          maxLength: 255
        description:
          type: string
          minLength: 1
          maxLength: 255
        code:
          type: string
          example: TEST1234
          minLength: 4
          maxLength: 255
        quantity:
          type: integer
          minimum: 1
          maximum: 100000
  securitySchemes:
    auth:
      type: oauth2
      description: Auth0 token authorization server.
      flows:
        authorizationCode:
          authorizationUrl: https://auth.foriatickets.com/authorize?audience=api.foriatickets.com
          tokenUrl: https://auth.foriatickets.com/oauth/token
          scopes:
            write:event: Allows POST access to event endpoints.
            write:event_cancel: Special permission to cancel events.
            write:venue: Allows POST access to venue endpoints.
            write:redeem: Allows tickets to be scanned and users redeemed manually.
            write:register: Allows user to be created in Foria system.
